// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  password         String
  role             Role      @default(USER)
  stripeCustomerId String?   @unique
  bookings         Booking[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Class            Class[]

  @@map("users")
}

model Page {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  layout    String   @default("default")
  content   Json
  seo       Json?
  status    Status   @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pages")
}

model Class {
  id           String    @id @default(cuid())
  title        String
  description  String
  instructor   User      @relation(fields: [instructorId], references: [id])
  instructorId String
  capacity     Int
  price        Float
  schedule     DateTime
  duration     Int // in minutes
  bookings     Booking[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("classes")
}

model Booking {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  class     Class         @relation(fields: [classId], references: [id])
  classId   String
  status    BookingStatus @default(PENDING)
  payment   Payment?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  booking         Booking       @relation(fields: [bookingId], references: [id])
  bookingId       String        @unique
  amount          Float
  currency        String        @default("USD")
  stripePaymentId String        @unique
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

model Media {
  id        String   @id @default(cuid())
  filename  String
  alt       String?
  mimeType  String
  filesize  Int
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("media")
}

enum Role {
  ADMIN
  INSTRUCTOR
  USER
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
